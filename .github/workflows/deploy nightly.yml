name: "Deploy Nightly"

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
        
  nightly: 
    name: Deploy nightly
    runs-on: "ubuntu-latest"
    container: "debian:bullseye-slim"
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    
    steps:
      - run: "apt-get update && apt-get install -y --no-install-recommends git locate curl sudo build-essential ca-certificates git make python3 pkg-config nettle-dev ninja-build"
  
      - run: "curl https://sh.rustup.rs -sSf | sh -s -- -y"      
      
      - run: 'echo "/__w/_temp/_github_home/.cargo/bin/" >> $GITHUB_PATH'
         
      - run: "rustup target install aarch64-unknown-linux-gnu"
       
      - run: "dpkg --add-architecture arm64"  
      
      - run: "apt-get install  -y --no-install-recommends crossbuild-essential-arm64 gcc-10-aarch64-linux-gnu && sudo apt-get update"
      
      - run: "apt-get install  -y --no-install-recommends libssl-dev:arm64 libcap-ng-dev:arm64 libpixman-1-dev:arm64 libglib2.0-dev:arm64 libbz2-dev:arm64 liblzo2-dev:arm64 librdmacm-dev:arm64"

      - uses: actions/checkout@v2
        with:
            submodules: recursive
      
      - name: Stamp nightly-tag
        uses: EndBug/latest-tag@latest
        with:
          tag-name: nightly
          description: Update nightly tag.

      - run: ./init-repo.sh
      
      - name: "yagna"
        run: ./build.sh yagna
            
      - name: "ya-runtime-vm"
        run: ./build.sh ya-runtime-vm
      
      - name: "ya-runtime-wasi"
        run: ./build.sh ya-runtime-wasi
          
      - run: ./build-release-artifact.sh
                    
      - name: Upload Artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: app
          path:  yagna.tar.gz
